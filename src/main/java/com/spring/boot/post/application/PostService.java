package com.spring.boot.post.application;import com.spring.boot.common.error.NotFoundException;import com.spring.boot.common.util.S3Client;import com.spring.boot.common.util.UploadFile;import com.spring.boot.member.domain.member.MemberRepository;import com.spring.boot.post.application.dto.PostRequest;import com.spring.boot.post.domain.Image;import com.spring.boot.post.domain.ImageRepository;import com.spring.boot.post.domain.Post;import com.spring.boot.post.domain.PostRepository;import com.spring.boot.post.domain.PostTag;import com.spring.boot.post.domain.PostTagRepository;import com.spring.boot.tag.domain.Tag;import com.spring.boot.tag.domain.TagRepository;import java.util.List;import java.util.Optional;import java.util.Set;import java.util.stream.Collectors;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;@Servicepublic class PostService {  private final S3Client s3Uploader;  private final PostRepository postRepository;  private final MemberRepository memberRepository;  private final TagRepository tagRepository;  private final PostTagRepository postTagRepository;  private final ImageRepository imageRepository;  public PostService(S3Client s3Uploader, PostRepository postRepository,      MemberRepository memberRepository, TagRepository tagRepository,      PostTagRepository postTagRepository, ImageRepository imageRepository) {    this.s3Uploader = s3Uploader;    this.postRepository = postRepository;    this.memberRepository = memberRepository;    this.tagRepository = tagRepository;    this.postTagRepository = postTagRepository;    this.imageRepository = imageRepository;  }  @Transactional  public Post createPost(Long writerId, PostRequest postRequest,      List<MultipartFile> multipartFiles) {    return memberRepository.findById(writerId).map(writer -> {      Post post = postRepository.save(          new Post(postRequest.getTitle(), postRequest.getBody(), writer)      );      List<Image> images = convertToImages(multipartFiles, post);      imageRepository.saveAll(images);      Set<PostTag> postTags = convertToPostTags(postRequest.getPostTags(), post);      postTagRepository.saveAll(postTags);      post.setPostTags(postTags);      post.setImages(images);      return post;    }).orElseThrow(IllegalArgumentException::new);  }  private Set<PostTag> convertToPostTags(List<String> tagNames, Post post) {    return tagNames.stream().distinct()        .map(tagName -> tagRepository.findByTagName(tagName).orElse(new Tag(tagName)))        .map(tag -> new PostTag(tag, post)).collect(Collectors.toSet());  }  private List<Image> convertToImages(List<MultipartFile> multipartFiles, Post post) {    return multipartFiles.stream().map(UploadFile::toUploadFile).filter(Optional::isPresent)        .map(Optional::get).map(uploadFile -> new Image(s3Uploader.upload(uploadFile), post))        .collect(Collectors.toList());  }  @Transactional  public List<Post> getPostByMemberId(Long memberId) {    return memberRepository.findById(memberId).map(postRepository::findByMemberWithTags)        .map(posts -> {          posts.forEach(post -> {            // todo            post.getImages().forEach(Image::getId);          });          return posts;        }).orElseThrow(() -> new NotFoundException(Post.class, "member", memberId));  }  @Transactional  public Post getPostByPostId(Long postId) {    return postRepository.findByPostIdWithTags(postId).map(post -> {      // todo      post.getImages().forEach(Image::getId);      System.out.println(post.getMember());      return post;    }).orElseThrow(() -> new NotFoundException(Post.class, "post", postId));  }}