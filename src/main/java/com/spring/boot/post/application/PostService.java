package com.spring.boot.post.application;import com.spring.boot.common.error.NotFoundException;import com.spring.boot.member.domain.member.MemberRepository;import com.spring.boot.post.presentaion.dto.PostRequest;import com.spring.boot.post.domain.Post;import com.spring.boot.post.domain.PostRepository;import com.spring.boot.image.domain.Image;import com.spring.boot.image.domain.ImageRepository;import com.spring.boot.image.domain.ImageUploader;import com.spring.boot.post.domain.tag.PostTag;import com.spring.boot.post.domain.tag.PostTagRepository;import com.spring.boot.image.domain.UploadFile;import com.spring.boot.tag.domain.Tag;import com.spring.boot.tag.domain.TagRepository;import java.util.Collections;import java.util.List;import java.util.Optional;import java.util.Set;import java.util.stream.Collectors;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;@Servicepublic class PostService {  private final ImageUploader s3Uploader;  private final PostRepository postRepository;  private final MemberRepository memberRepository;  private final TagRepository tagRepository;  private final PostTagRepository postTagRepository;  private final ImageRepository imageRepository;  public PostService(ImageUploader s3Uploader, PostRepository postRepository,      MemberRepository memberRepository, TagRepository tagRepository,      PostTagRepository postTagRepository, ImageRepository imageRepository) {    this.s3Uploader = s3Uploader;    this.postRepository = postRepository;    this.memberRepository = memberRepository;    this.tagRepository = tagRepository;    this.postTagRepository = postTagRepository;    this.imageRepository = imageRepository;  }  @Transactional  public Post createPost(Long writerId, PostRequest postRequest,      List<MultipartFile> multipartFiles) {    return memberRepository.findById(writerId).map(writer -> {      List<Image> images = convertToImages(multipartFiles);      Set<PostTag> postTags = convertToPostTags(postRequest.getPostTags());      Post post = new Post(postRequest.getTitle(), postRequest.getBody(), writer);      images.forEach(image -> image.changePost(post));      postTags.forEach(postTag -> postTag.changePost(post));      postRepository.save(post);      postTagRepository.saveAll(postTags);      imageRepository.saveAll(images);      return post;    }).orElseThrow(IllegalArgumentException::new);  }  private Set<PostTag> convertToPostTags(List<String> tagNames) {    return tagNames.stream().distinct()        .map(tagName -> tagRepository.findByTagName(tagName)            .orElseGet(() -> tagRepository.save(new Tag(tagName))))        .map(PostTag::new).collect(Collectors.toSet());  }  private List<Image> convertToImages(List<MultipartFile> multipartFiles) {    if (multipartFiles == null) {      return Collections.emptyList();    }    return multipartFiles.stream().map(UploadFile::toUploadFile).filter(Optional::isPresent)        .map(Optional::get).map(uploadFile -> new Image(s3Uploader.upload(uploadFile)))        .collect(Collectors.toList());  }  @Transactional  public Post getPostByPostId(Long postId) {    return postRepository.findByPostIdWithMember(postId).map(post -> {          // todo          for (Image image : post.getImages()) {            image.getId();            break;          }          for (PostTag postTag : post.getPostTags()) {            postTag.getId();            break;          }          return post;        })        .orElseThrow(() -> new NotFoundException(Post.class, "post", postId));  }  @Transactional  public List<Post> getPostByMemberId(Long memberId) {    return memberRepository.findById(memberId).map(member -> {          List<Post> posts = postRepository.findByMember(member);          // todo          for (Post findPost : posts) {            for (Image image : findPost.getImages()) {              image.getId();              break;            }            for (PostTag postTag : findPost.getPostTags()) {              postTag.getId();              break;            }          }          return posts;        })        .orElseThrow(() -> new NotFoundException(Post.class, "member", memberId));  }//  @Transactional(readOnly = true)//  public List<Post> getAllFollowingsPost(Long memberId, Pageable pageable) {//    Member member = memberRepository.findById(memberId)//        .orElseThrow(() -> new NotFoundException(Member.class, memberId));//    List<Post> posts = postRepository.getAllFollowingsPost(member, pageable);//    posts.forEach(post -> {//      post.getImages().stream().findFirst().ifPresent(image -> image.getId());//      post.getPostTags().stream().findFirst().ifPresent(postTag -> postTag.getId());//    });//    return posts;//  }}